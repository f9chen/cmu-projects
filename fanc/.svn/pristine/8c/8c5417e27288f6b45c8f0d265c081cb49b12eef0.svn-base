package dao;

import instacram.Enrollment;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Product Version: NetBeans IDE 7.1 (Build 201112071828)
 * @author Fan Chen
 */
public class EnrollmentDAOSQLImpl implements EnrollmentDAO{

  private List<Connection> connectionPool = new ArrayList<Connection>();

  private String jdbcDriver;
  private String jdbcURL;

  public EnrollmentDAOSQLImpl(String jdbcDriver, String jdbcURL) {
    this.jdbcDriver = jdbcDriver;
    this.jdbcURL    = jdbcURL;

    try {
      createTable();
    } catch (MyDAOException e) {
      // Ignore ... if thrown assume it's because table already exists
      // If it's some other problem we'll fail later on
    }
  }

  @Override
    public Enrollment createEnrollment(String email, String courseName) throws MyDAOException {

      Connection con = null;
      try {
        con = getConnection();
        PreparedStatement pstmt = con.prepareStatement("INSERT INTO fanc_enrollment(email,courseName) VALUES (?,?)");

        Enrollment newEnrollment = new Enrollment(email, courseName);
        pstmt.setString(1,email);
        pstmt.setString(2,courseName);

        int count = pstmt.executeUpdate();
        if (count != 1) throw new SQLException("Insert updated "+count+" rows");

        pstmt.close();
        releaseConnection(con);
        return newEnrollment;

      } catch (Exception e) {
        try { if (con != null) con.close(); } catch (SQLException e2) { /* ignore */ }
        throw new MyDAOException(e);
      }


    }


  private void createTable() throws MyDAOException {
    Connection con = null;
    try {
      con = getConnection();
      Statement stmt = con.createStatement();
      stmt.executeUpdate("CREATE TABLE fanc_enrollment (email VARCHAR(255) NOT NULL,courseName VARCHAR(255) NOT NULL, PRIMARY KEY(courseName, email))");
      stmt.close();

      releaseConnection(con);

    } catch (SQLException e) {
      try { if (con != null) con.close(); } catch (SQLException e2) { /* ignore */ }
      throw new MyDAOException(e);
    }
  }


  private synchronized Connection getConnection() throws MyDAOException {
    if (connectionPool.size() > 0) {
      return connectionPool.remove(connectionPool.size()-1);
    }

    try {
      Class.forName(jdbcDriver);
    } catch (ClassNotFoundException e) {
      throw new MyDAOException(e);
    }

    try {
      return DriverManager.getConnection(jdbcURL);
    } catch (SQLException e) {
      throw new MyDAOException(e);
    }
  }

  private synchronized void releaseConnection(Connection con) {
    connectionPool.add(con);
  }


}
